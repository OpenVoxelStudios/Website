/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 ../../public/3d/giggles.glb --types 
*/

import * as THREE from 'three'
import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type ActionName = 'giggles' | 'hanging' | 'Prep_Falling' | 'Falling' | 'Land' | 'Die'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    giggles: THREE.SkinnedMesh
    giggles_1: THREE.Bone
  }
  materials: {}
  animations: GLTFAction[]
}

export default function Giggles(props: JSX.IntrinsicElements['group']) {
  const group = React.useRef<THREE.Group>()
  const { scene, animations } = useGLTF('/3d/giggles.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions } = useAnimations(animations, group)
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="blockbench_export">
        <skinnedMesh name="giggles" geometry={nodes.giggles.geometry} material={nodes.giggles.material} skeleton={nodes.giggles.skeleton} position={[0, 0, -0.041]}>
          <primitive object={nodes.giggles_1} />
        </skinnedMesh>
      </group>
    </group>
  )
}

useGLTF.preload('/3d/giggles.glb')
